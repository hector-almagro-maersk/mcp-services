name: Build MCP Server

on:
  workflow_dispatch:
    inputs:
      mcp_service:
        description: 'Select MCP Service to build'
        required: true
        default: 'sqlserver'
        type: choice
        options:
          - sqlserver
          # Add more MCP services here as they are created
          # - filesystem
          # - database
          # - api-client

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: '${{ inputs.mcp_service }}/package-lock.json'
    
    - name: Get MCP version
      id: get_version
      run: |
        cd ${{ inputs.mcp_service }}
        if [ -f "VERSION" ]; then
          VERSION=$(cat VERSION)
        elif [ -f "package.json" ]; then
          VERSION=$(node -p "require('./package.json').version")
        else
          VERSION="1.0.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "MCP Service: ${{ inputs.mcp_service }}"
        echo "Version: $VERSION"
    
    - name: Install dependencies
      run: |
        cd ${{ inputs.mcp_service }}
        npm ci
    
    - name: Build project
      run: |
        cd ${{ inputs.mcp_service }}
        npm run build
    
    - name: Run tests (if available)
      run: |
        cd ${{ inputs.mcp_service }}
        if [ -f "test-server.sh" ]; then
          chmod +x test-server.sh
          timeout 30s ./test-server.sh || echo "Tests completed or timed out"
        else
          echo "No test script found, skipping tests"
        fi
      continue-on-error: true
    
    - name: Create artifact package
      run: |
        cd ${{ inputs.mcp_service }}
        
        # Create a clean build directory
        mkdir -p ../build-output
        
        # Copy essential files
        cp -r dist ../build-output/
        cp package.json ../build-output/
        cp README.md ../build-output/ 2>/dev/null || echo "README.md not found"
        cp CHANGELOG.md ../build-output/ 2>/dev/null || echo "CHANGELOG.md not found"
        cp VERSION ../build-output/ 2>/dev/null || echo "VERSION not found"
        cp *.sh ../build-output/ 2>/dev/null || echo "No shell scripts found"
        
        # Copy configuration examples
        cp *.json ../build-output/ 2>/dev/null || echo "No config files found"
        
        # Create info file
        cat > ../build-output/BUILD_INFO.txt << EOF
        MCP Service: ${{ inputs.mcp_service }}
        Version: ${{ steps.get_version.outputs.version }}
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Git Commit: ${{ github.sha }}
        Built by: GitHub Actions
        Repository: ${{ github.repository }}
        EOF
        
        echo "Artifact contents:"
        ls -la ../build-output/
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.mcp_service }}-v${{ steps.get_version.outputs.version }}
        path: build-output/
        retention-days: 90
        if-no-files-found: error
        overwrite: true
    
    - name: Summary
      run: |
        echo "## ðŸŽ‰ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**MCP Service:** ${{ inputs.mcp_service }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Artifact Name:** ${{ inputs.mcp_service }}-v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Artifact Contents" >> $GITHUB_STEP_SUMMARY
        echo "- \`dist/\` - Compiled JavaScript code" >> $GITHUB_STEP_SUMMARY
        echo "- \`package.json\` - Package configuration" >> $GITHUB_STEP_SUMMARY
        echo "- \`README.md\` - Documentation (if available)" >> $GITHUB_STEP_SUMMARY
        echo "- \`CHANGELOG.md\` - Version history (if available)" >> $GITHUB_STEP_SUMMARY
        echo "- \`VERSION\` - Version file (if available)" >> $GITHUB_STEP_SUMMARY
        echo "- \`BUILD_INFO.txt\` - Build information" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration and script files" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”½ Download" >> $GITHUB_STEP_SUMMARY
        echo "The artifact can be downloaded from the **Actions** tab in this repository." >> $GITHUB_STEP_SUMMARY
        echo "Artifacts are retained for **90 days**." >> $GITHUB_STEP_SUMMARY
