name: Build MCP Server

on:
  workflow_dispatch:
    inputs:
      mcp_service:
        description: 'Select MCP Service to build'
        required: true
        default: 'sqlserver'
        type: choice
        options:
          - sqlserver
          # Add more MCP services here as they are created
          # - filesystem
          # - database
          # - api-client

run-name: 'Build MCP Server: ${{ inputs.mcp_service }}'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Get MCP version
      id: get_version
      run: |
        cd ${{ inputs.mcp_service }}
        if [ -f "VERSION" ]; then
          VERSION=$(cat VERSION)
        elif [ -f "package.json" ]; then
          VERSION=$(node -p "require('./package.json').version")
        else
          VERSION="1.0.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "MCP Service: ${{ inputs.mcp_service }}"
        echo "Version: $VERSION"
    
    - name: Install dependencies
      run: |
        cd ${{ inputs.mcp_service }}
        npm install
    
    - name: Build project
      run: |
        cd ${{ inputs.mcp_service }}
        echo "Current directory: $(pwd)"
        echo "Files before build:"
        ls -la
        npm run build
        echo "Files after build:"
        ls -la
        if [ -d "dist" ]; then
          echo "dist directory contents:"
          ls -la dist/
        else
          echo "ERROR: dist directory was not created!"
          exit 1
        fi
    
    - name: Run tests (if available)
      run: |
        cd ${{ inputs.mcp_service }}
        if [ -f "test-server.sh" ]; then
          chmod +x test-server.sh
          timeout 30s ./test-server.sh || echo "Tests completed or timed out"
        else
          echo "No test script found, skipping tests"
        fi
      continue-on-error: true
    
    - name: Create artifact package
      run: |
        cd ${{ inputs.mcp_service }}
        
        # Verify dist directory exists
        if [ ! -d "dist" ]; then
          echo "ERROR: dist directory not found"
          exit 1
        fi
        
        echo "Packaging only dist contents for artifact..."
        echo "dist directory contents:"
        ls -la dist/
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.mcp_service }}-v${{ steps.get_version.outputs.version }}
        path: ${{ inputs.mcp_service }}/dist/
        retention-days: 90
        if-no-files-found: error
        overwrite: true
    
    - name: Summary
      run: |
        echo "## ðŸŽ‰ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**MCP Service:** ${{ inputs.mcp_service }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Artifact Name:** ${{ inputs.mcp_service }}-v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Artifact Contents" >> $GITHUB_STEP_SUMMARY
        echo "The artifact contains only the compiled JavaScript code from the \`dist/\` directory:" >> $GITHUB_STEP_SUMMARY
        echo "- \`index.js\` - Main compiled server file" >> $GITHUB_STEP_SUMMARY
        echo "- Additional compiled TypeScript files (if any)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”½ Download" >> $GITHUB_STEP_SUMMARY
        echo "The artifact can be downloaded from the **Actions** tab in this repository." >> $GITHUB_STEP_SUMMARY
        echo "Artifacts are retained for **90 days**." >> $GITHUB_STEP_SUMMARY
