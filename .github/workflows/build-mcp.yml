name: Build MCP Server

on:
  workflow_dispatch:
    inputs:
      mcp_service:
        description: 'Select MCP Service to build'
        required: true
        default: 'sqlserver'
        type: choice
        options:
          - sqlserver
          # Add more MCP services here as they are created
          # - filesystem
          # - database
          # - api-client

run-name: 'Build MCP Server: ${{ inputs.mcp_service }}'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Get MCP version
      id: get_version
      run: |
        cd ${{ inputs.mcp_service }}
        if [ -f "VERSION" ]; then
          VERSION=$(cat VERSION)
        elif [ -f "package.json" ]; then
          VERSION=$(node -p "require('./package.json').version")
        else
          VERSION="1.0.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "MCP Service: ${{ inputs.mcp_service }}"
        echo "Version: $VERSION"
    
    - name: Install dependencies
      run: |
        cd ${{ inputs.mcp_service }}
        echo "Installing dependencies..."
        npm ci --production=false
        echo "Dependencies installed successfully"
        echo "Node modules contents:"
        ls -la node_modules/ | head -20
    
    - name: Build project
      run: |
        cd ${{ inputs.mcp_service }}
        echo "Current directory: $(pwd)"
        echo "Files before build:"
        ls -la
        echo "Building project..."
        npm run build
        echo "Build completed successfully"
        echo "Files after build:"
        ls -la
        if [ -d "dist" ]; then
          echo "dist directory contents:"
          ls -la dist/
        else
          echo "ERROR: dist directory was not created!"
          exit 1
        fi
    
    - name: Run tests (if available)
      run: |
        cd ${{ inputs.mcp_service }}
        if [ -f "test-server.sh" ]; then
          chmod +x test-server.sh
          timeout 30s ./test-server.sh || echo "Tests completed or timed out"
        else
          echo "No test script found, skipping tests"
        fi
      continue-on-error: true
    
    - name: Create artifact package
      run: |
        cd ${{ inputs.mcp_service }}
        
        # Verify dist directory exists
        if [ ! -d "dist" ]; then
          echo "ERROR: dist directory not found"
          exit 1
        fi
        
        # Verify node_modules exists
        if [ ! -d "node_modules" ]; then
          echo "ERROR: node_modules directory not found"
          exit 1
        fi
        
        echo "Creating package structure with MCP server name folder..."
        echo "Current working directory: $(pwd)"
        echo "Files in current directory before packaging:"
        ls -la
        
        # Go back to root and create package directory
        cd ..
        rm -rf package-temp
        mkdir -p package-temp
        
        # Create the MCP server folder inside the package
        mkdir -p package-temp/mcp-${{ inputs.mcp_service }}-server
        
        # Copy all project contents to the MCP server folder (including node_modules, excluding only .git and .github)
        echo "Copying files with rsync (including node_modules)..."
        rsync -av --exclude='.git' --exclude='.github' --exclude='package-temp' --exclude='.gitignore' ${{ inputs.mcp_service }}/ package-temp/mcp-${{ inputs.mcp_service }}-server/
        
        echo "Package structure created:"
        ls -la package-temp/
        echo "Contents of mcp-${{ inputs.mcp_service }}-server folder:"
        ls -la package-temp/mcp-${{ inputs.mcp_service }}-server/
        echo "Contents of dist folder in package:"
        ls -la package-temp/mcp-${{ inputs.mcp_service }}-server/dist/
        echo "Contents of src folder in package:"
        ls -la package-temp/mcp-${{ inputs.mcp_service }}-server/src/
        echo "Verifying node_modules was copied:"
        if [ -d "package-temp/mcp-${{ inputs.mcp_service }}-server/node_modules" ]; then
          echo "âœ“ node_modules directory successfully copied"
          echo "Sample of node_modules contents:"
          ls -la package-temp/mcp-${{ inputs.mcp_service }}-server/node_modules/ | head -10
        else
          echo "âœ— ERROR: node_modules directory was not copied!"
          exit 1
        fi
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.mcp_service }}-v${{ steps.get_version.outputs.version }}
        path: package-temp/
        retention-days: 90
        if-no-files-found: error
        overwrite: true
    
    - name: Verify artifact contents
      run: |
        echo "## ðŸ“‹ Final Artifact Verification" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Complete file tree of the artifact:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find package-temp/ -type f | sort >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count files
        TOTAL_FILES=$(find package-temp/ -type f | wc -l)
        echo "**Total files in artifact: $TOTAL_FILES**" >> $GITHUB_STEP_SUMMARY
    
    - name: Summary
      run: |
        echo "## ðŸŽ‰ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**MCP Service:** ${{ inputs.mcp_service }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Artifact Name:** ${{ inputs.mcp_service }}-v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Artifact Contents" >> $GITHUB_STEP_SUMMARY
        echo "The artifact contains the complete MCP server project organized in a folder structure:" >> $GITHUB_STEP_SUMMARY
        echo "- \`mcp-${{ inputs.mcp_service }}-server/\` - Main folder containing:" >> $GITHUB_STEP_SUMMARY
        echo "  - \`dist/\` - Compiled JavaScript code and resources" >> $GITHUB_STEP_SUMMARY
        echo "  - \`src/\` - Original TypeScript source code" >> $GITHUB_STEP_SUMMARY
        echo "  - \`node_modules/\` - All installed dependencies" >> $GITHUB_STEP_SUMMARY
        echo "  - \`package.json\` - Node.js package configuration" >> $GITHUB_STEP_SUMMARY
        echo "  - \`tsconfig.json\` - TypeScript configuration" >> $GITHUB_STEP_SUMMARY
        echo "  - \`README.md\` - Documentation and usage instructions" >> $GITHUB_STEP_SUMMARY
        echo "  - \`VERSION\` - Version information" >> $GITHUB_STEP_SUMMARY
        echo "  - Additional configuration and documentation files" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”½ Download" >> $GITHUB_STEP_SUMMARY
        echo "The artifact can be downloaded from the **Actions** tab in this repository." >> $GITHUB_STEP_SUMMARY
        echo "Artifacts are retained for **90 days**." >> $GITHUB_STEP_SUMMARY
