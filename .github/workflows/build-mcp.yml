name: Build MCP Server

on:
  workflow_dispatch:
    inputs:
      mcp_service:
        description: 'Select MCP Service to build'
        required: true
        default: 'sqlserver'
        type: choice
        options:
          - sqlserver
          # Add more MCP services here as they are created
          # - filesystem
          # - database
          # - api-client

run-name: 'Build MCP Server: ${{ inputs.mcp_service }}'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Get MCP version
      id: get_version
      run: |
        cd ${{ inputs.mcp_service }}
        if [ -f "VERSION" ]; then
          VERSION=$(cat VERSION)
        elif [ -f "package.json" ]; then
          VERSION=$(node -p "require('./package.json').version")
        else
          VERSION="1.0.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "MCP Service: ${{ inputs.mcp_service }}"
        echo "Version: $VERSION"
    
    - name: Install dependencies
      run: |
        cd ${{ inputs.mcp_service }}
        echo "Installing dependencies..."
        
        # Check if it's a Python project
        if [ -f "requirements.txt" ]; then
          echo "Python project detected, installing Python dependencies..."
          pip install -r requirements.txt
          echo "Python dependencies installed successfully"
        elif [ -f "package.json" ]; then
          echo "Node.js project detected, installing Node.js dependencies..."
          npm install
          echo "Node.js dependencies installed successfully"
          echo "Node modules contents:"
          ls -la node_modules/ | head -20
        else
          echo "No dependency file found (requirements.txt or package.json)"
        fi
    
    - name: Build project
      run: |
        cd ${{ inputs.mcp_service }}
        echo "Current directory: $(pwd)"
        echo "Files before build:"
        ls -la
        
        # Check if it's a Python project
        if [ -f "requirements.txt" ]; then
          echo "Python project detected - no build step required"
          echo "Validating Python server can run..."
          python server.py --help || echo "Server help command completed"
        elif [ -f "package.json" ]; then
          echo "Node.js project detected, building project..."
          npm run build
          echo "Build completed successfully"
          echo "Files after build:"
          ls -la
          if [ -d "dist" ]; then
            echo "dist directory contents:"
            ls -la dist/
          else
            echo "ERROR: dist directory was not created!"
            exit 1
          fi
        else
          echo "No build configuration found"
        fi
    
    - name: Run tests (if available)
      run: |
        cd ${{ inputs.mcp_service }}
        
        # Check for Python tests
        if [ -f "test_server.py" ]; then
          echo "Running Python tests..."
          python -m pytest test_server.py -v || echo "Python tests completed"
        elif [ -f "test-server.sh" ]; then
          chmod +x test-server.sh
          timeout 30s ./test-server.sh || echo "Shell tests completed or timed out"
        else
          echo "No test files found, skipping tests"
        fi
      continue-on-error: true
    
    - name: Create artifact package
      run: |
        cd ${{ inputs.mcp_service }}
        
        echo "Creating package structure with MCP server name folder..."
        echo "Current working directory: $(pwd)"
        echo "Files in current directory before packaging:"
        ls -la
        
        # Go back to root and create package directory
        cd ..
        rm -rf package-temp
        mkdir -p package-temp
        
        # Create the MCP server folder inside the package
        mkdir -p package-temp/mcp-${{ inputs.mcp_service }}-server
        
        # Copy all project contents to the MCP server folder (excluding only .git and .github)
        echo "Copying files with rsync..."
        rsync -av --exclude='.git' --exclude='.github' --exclude='package-temp' --exclude='.gitignore' --exclude='__pycache__' --exclude='*.pyc' ${{ inputs.mcp_service }}/ package-temp/mcp-${{ inputs.mcp_service }}-server/
        
        echo "Package structure created:"
        ls -la package-temp/
        echo "Contents of mcp-${{ inputs.mcp_service }}-server folder:"
        ls -la package-temp/mcp-${{ inputs.mcp_service }}-server/
        
        # Check for Python or Node.js project structure
        if [ -f "package-temp/mcp-${{ inputs.mcp_service }}-server/requirements.txt" ]; then
          echo "Python project packaged successfully"
          echo "Contents of Python project:"
          ls -la package-temp/mcp-${{ inputs.mcp_service }}-server/
        elif [ -d "package-temp/mcp-${{ inputs.mcp_service }}-server/dist" ]; then
          echo "Contents of dist folder in package:"
          ls -la package-temp/mcp-${{ inputs.mcp_service }}-server/dist/
        fi
        
        if [ -d "package-temp/mcp-${{ inputs.mcp_service }}-server/src" ]; then
          echo "Contents of src folder in package:"
          ls -la package-temp/mcp-${{ inputs.mcp_service }}-server/src/
        fi
        
        if [ -d "package-temp/mcp-${{ inputs.mcp_service }}-server/node_modules" ]; then
          echo "âœ“ node_modules directory successfully copied"
          echo "Sample of node_modules contents:"
          ls -la package-temp/mcp-${{ inputs.mcp_service }}-server/node_modules/ | head -10
        fi
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.mcp_service }}-v${{ steps.get_version.outputs.version }}
        path: package-temp/
        retention-days: 90
        if-no-files-found: error
        overwrite: true
    
    - name: Summary
      run: |
        echo "## ðŸŽ‰ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**MCP Service:** ${{ inputs.mcp_service }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Artifact Name:** ${{ inputs.mcp_service }}-v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Artifact Contents" >> $GITHUB_STEP_SUMMARY
        echo "The artifact contains the complete MCP server project organized in a folder structure:" >> $GITHUB_STEP_SUMMARY
        echo "- \`mcp-${{ inputs.mcp_service }}-server/\` - Main folder containing:" >> $GITHUB_STEP_SUMMARY
        
        # Check if it's a Python or Node.js project
        cd package-temp/mcp-${{ inputs.mcp_service }}-server/
        if [ -f "requirements.txt" ]; then
          echo "  - \`server.py\` - Python MCP server implementation" >> $GITHUB_STEP_SUMMARY
          echo "  - \`requirements.txt\` - Python dependencies" >> $GITHUB_STEP_SUMMARY
          echo "  - \`test_server.py\` - Unit tests" >> $GITHUB_STEP_SUMMARY
          echo "  - \`README.md\` - Documentation and usage instructions" >> $GITHUB_STEP_SUMMARY
          echo "  - \`VERSION\` - Version information" >> $GITHUB_STEP_SUMMARY
          echo "  - \`CHANGELOG.md\` - Version history and changes" >> $GITHUB_STEP_SUMMARY
        else
          echo "  - \`dist/\` - Compiled JavaScript code and resources" >> $GITHUB_STEP_SUMMARY
          echo "  - \`src/\` - Original TypeScript source code" >> $GITHUB_STEP_SUMMARY
          echo "  - \`node_modules/\` - All installed dependencies" >> $GITHUB_STEP_SUMMARY
          echo "  - \`package.json\` - Node.js package configuration" >> $GITHUB_STEP_SUMMARY
          echo "  - \`tsconfig.json\` - TypeScript configuration" >> $GITHUB_STEP_SUMMARY
          echo "  - \`README.md\` - Documentation and usage instructions" >> $GITHUB_STEP_SUMMARY
          echo "  - \`VERSION\` - Version information" >> $GITHUB_STEP_SUMMARY
        fi
        cd ../../
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”½ Download" >> $GITHUB_STEP_SUMMARY
        echo "The artifact can be downloaded from the **Actions** tab in this repository." >> $GITHUB_STEP_SUMMARY
        echo "Artifacts are retained for **90 days**." >> $GITHUB_STEP_SUMMARY
